server:
  port: 8080
logging:
  level:
    org.springframework.web: INFO
    com.github.binarywang.demo.wx.mp: DEBUG
    me.chanjar.weixin: DEBUG
mybatis-plus:
  mapper-locations: classpath:mapper/**/*.xml
  configuration:
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
    map-underscore-to-camel-case: true
spring:
  profiles:
    #运行的环境
    active: test
  application:
    name: diting
  datasource:
    url: jdbc:mysql://${mallchat.mysql.ip}:${mallchat.mysql.port}/${mallchat.mysql.db}?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai
    username: ${mallchat.mysql.username}
    password: ${mallchat.mysql.password}
    driver-class-name: com.mysql.cj.jdbc.Driver
    hikari:
      minimum-idle: 3
      maximum-pool-size: 10
      max-lifetime: 30000   #不能小于30秒，否则默认回到1800秒
      connection-test-query: SELECT 1
  mvc:
    pathmatch:
      matching-strategy: ANT_PATH_MATCHER
  redis:
    # Redis服务器地址
    host: ${mallchat.redis.host}
    # Redis服务器端口号
    port: ${mallchat.redis.port}
    # 使用的数据库索引，默认是0
    database: 0
    # 连接超时时间
    timeout: 1800000
    # 设置密码
    password: ${mallchat.redis.password}
  jackson:
    serialization:
      write-dates-as-timestamps: true
jwt:
  secret: ${mallchat.jwt.secret}
wx:
  mp:
    #    callback: http://f4cd-113-92-129-127.ngrok.io
    callback: ${mallchat.wx.callback}
    configs:
      - appId: ${mallchat.wx.appId} # 第一个公众号的appid
        secret: ${mallchat.wx.secret} # 公众号的appsecret
        token: ${mallchat.wx.token} # 接口配置里的Token值
        aesKey: ${mallchat.wx.aesKey} # 接口配置里的EncodingAESKey值

j2cache:
  # 开启J2Cache支持Spring Cache
  open-spring-cache: true
  # 缓存清除模式（active | passive | blend）
  cache-clean-mode: passive
  # 缓存变更广播方式（jgroups | redis | lettuce | rabbitmq | rocketmq | none | 自定义class）
  # 保持默认SpringBoot Redis自定义实现SpringRedisPubSubPolicy
  broadcast: com.luo.j2cache.sb.cache.support.redis.SpringRedisPubSubPolicy
  # 缓存null对象
  default-cache-null-object: true
  # L1缓存配置
  l1:
    # L1 缓存provider名称（caffeine | ehcache | ehcache3）
    provider-class: caffeine
    # Caffeine配置
    caffeine:
      region:
        default: 100,10m
        myRegion: 10,5m
  # L2缓存配置
  l2:
    # L2 缓存provider名称（redis | lettuce | readonly-redis | memcached）
    # 保持默认SpringBoot Redis自定义实现SpringRedisProvider
    provider-class: com.luo.j2cache.sb.cache.support.redis.SpringRedisProvider
    # 二级缓存序列化格式（fst（推荐） | kryo | json | fastjson | java（默认） | fse | 自定义classname）
    serialization: fastjson
    redis:
      # 是否启用同步一级缓存的Time-To-Live超时时间到Redis TTL（true启用，false不启用则永不超时）
      sync-ttl-to-redis: true
      # Redis发布订阅（Pub/Sub）对应的channel名称
      channel: j2cache
      #  Key命名空间（前缀），默认为空
      namespace: myName
#chatai:
#  chatgpt:
#    use: ${mallchat.chatgpt.use}
#    AIUserId: ${mallchat.chatgpt.uid}
#    key: ${mallchat.chatgpt.key}
#    proxyUrl: ${mallchat.chatgpt.proxyUrl}
#  chatglm2:
#    use: ${mallchat.chatglm2.use}
#    url: ${mallchat.chatglm2.url}
#    minute: 3 # 每个用户每3分钟可以请求一次
#    AIUserId: ${mallchat.chatglm2.uid}
#rocketmq:
#  name-server: ${rocketmq.name-server}
#  # 默认的消息组
#  producer:
#    group: chatGroup
#    send-message-timeout: 3000 # 发送消息超时时间，单位：毫秒。默认为 3000 。
#    compress-message-body-threshold: 4096 # 消息压缩阀值，当消息体的大小超过该阀值后，进行消息压缩。默认为 4 * 1024B
#    max-message-size: 4194304 # 消息体的最大允许大小。。默认为 4 * 1024 * 1024B
#    retry-times-when-send-failed: 2 # 同步发送消息时，失败重试次数。默认为 2 次。
#    retry-times-when-send-async-failed: 2 # 异步发送消息时，失败重试次数。默认为 2 次。
#    retry-next-server: false # 发送消息给 Broker 时，如果发送失败，是否重试另外一台 Broker 。默认为 false
#    access-key: ${rocketmq.access-key} # Access Key ，可阅读 https://github.com/apache/rocketmq/blob/master/docs/cn/acl/user_guide.md 文档
#    secret-key: ${rocketmq.secret-key} # Secret Key
#    enable-msg-trace: true # 是否开启消息轨迹功能。默认为 true 开启。可阅读 https://github.com/apache/rocketmq/blob/master/docs/cn/msg_trace/user_guide.md 文档
#    customized-trace-topic: RMQ_SYS_TRACE_TOPIC # 自定义消息轨迹的 Topic 。默认为 RMQ_SYS_TRACE_TOPIC 。
#  # Consumer 配置项
#  consumer:
#    access-key: ${rocketmq.access-key} # Access Key ，可阅读 https://github.com/apache/rocketmq/blob/master/docs/cn/acl/user_guide.md 文档
#    secret-key: ${rocketmq.secret-key} # Secret Key
#    listeners: # 配置某个消费分组，是否监听指定 Topic 。结构为 Map<消费者分组, <Topic, Boolean>> 。默认情况下，不配置表示监听。
#      erbadagang-consumer-group:
#        topic1: false # 关闭 test-consumer-group 对 topic1 的监听消费

